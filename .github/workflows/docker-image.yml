name: CI and Docker Build

on:
  push:
    branches:
      - github-ci
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build and test Maven project
  build:
    name: Build Maven Project
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Check out code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK and Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      # Step 3: Build and test the project
      - name: Build
        run: |
          cd backend  
          mvn clean install --fail-fast -DskipTests=true

      # Step 4: Archive built artifacts
      - name: Upload Backendmarket JAR
        uses: actions/upload-artifact@v4
        with:
          name: backendmarket-jar
          path: backend/backendmarket-monolithic/target/*.jar

      - name: Upload Generation JAR
        uses: actions/upload-artifact@v4
        with:
          name: generation-jar
          path: backend/generation/target/*.jar

      - name: Upload Logger JAR
        uses: actions/upload-artifact@v4
        with:
          name: logger-jar
          path: backend/Logger/target/*.jar

  # Parallel jobs for Docker builds
  docker-backendmarket:
    name: Build Docker Image for Backendmarket
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 1: Use Maven-built artifacts
      - name: Copy JAR from Build
        uses: actions/download-artifact@v4
        with:
          name: backendmarket-jar
          path: backend/backendmarket-monolithic/target/backendmarket-monolithic-0.0.1-SNAPSHOT.jar
          if-no-files-found: error

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          cd backend/backendmarket-monolithic
          IMAGE_NAME=ghcr.io/${{ github.repository }}/backendmarket-monolithic
          GIT_SHA=$(git rev-parse --short $GITHUB_SHA)

          # Build the Docker image
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$GIT_SHA .

          # Push the Docker image
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$GIT_SHA

  docker-generation:
    name: Build Docker Image for Generation
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Copy JAR from Build
        uses: actions/download-artifact@v4
        with:
          name: generation-jar
          path: backend/generation/target/generation-0.0.1-SNAPSHOT.jar
          if-no-files-found: error
      # set up docker buildx for better performance
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          cd backend/generation
          IMAGE_NAME=ghcr.io/${{ github.repository}}/generation-service
          GIT_SHA=$(git rev-parse --short $GITHUB_SHA)

          # Build the Docker image
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$GIT_SHA .

          # Push the Docker image
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$GIT_SHA

  docker-logger:
    name: Build Docker Image for Logger
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Copy JAR from Build
        uses: actions/download-artifact@v4
        with:
          name: logger-jar
          path: backend/Logger/target/Logger-0.0.1-SNAPSHOT.jar
          if-no-files-found: error
      # set up docker buildx for better performance
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          cd backend/Logger
          IMAGE_NAME=ghcr.io/${{ github.repository }}/generation-service
          GIT_SHA=$(git rev-parse --short "$GITHUB_SHA")

          # Build the Docker image
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$GIT_SHA .

          # Push the Docker image
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$GIT_SHA

  build-and-push-node-and-proxy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - folder: front
            name: front
          - folder: proxy
            name: proxy
          - folder: backend/gameService
            name: game-service

    steps:
      # checkout the code
      - name: checkout code
        uses: actions/checkout@v4

      # set up docker buildx for better performance
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push ${{ matrix.service.name }}
        run: |
          cd ${{ matrix.service.folder }}
          image_name=ghcr.io/${{ github.repository }}/${{ matrix.service.name }}
          git_sha=$(git rev-parse --short $GITHUB_SHA)

          # build the docker image
          docker build -t $image_name:latest -t $image_name:$git_sha .

          # push the docker image
          docker push $image_name:latest
          docker push $image_name:$git_sha
