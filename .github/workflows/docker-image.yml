# name: Build and Push All Services into Docker Images

# on:
#   push:
#     branches:
#       - github-ci
#   pull_request:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     permissions:
#       contents: read
#       packages: write

#     strategy:
#       matrix:
#         service:
#           - backendmarket-monolithic
#           - game-service
#           - generation-service
#           - logger-service

#     steps:
#       # Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Set up Docker Buildx for better performance
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       # # Log in to GitHub Container Registry
#       # - name: Log in to GitHub Container Registry
#       #   uses: docker/login-action@v2
#       #   with:
#       #     username: ${{ github.actor }}
#       #     password: ${{ secrets.GITHUB_TOKEN }}

#       # Build and push the Docker image
#       - name: Build and push ${{ matrix.service }}
#         run: |
#           cd ${{ matrix.service }}
#           IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}
#           GIT_SHA=$(git rev-parse --short HEAD)

#           # Build the Docker image
#           docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$GIT_SHA .

#           # Push the Docker image
#           docker push $IMAGE_NAME:latest
#           docker push $IMAGE_NAME:$GIT_SHA

name: CI and Docker Build

on:
  push:
    branches:
      - github-ci
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build and test Maven project
  build:
    name: Build Maven Project
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK and Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      # Step 3: Build and test the project
      - name: Build and Test
        run: mvn clean install --fail-fast

  # Parallel jobs for Docker builds
  docker-backendmarket:
    name: Build Docker Image for Backendmarket
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 1: Use Maven-built artifacts
      - name: Copy JAR from Build
        uses: actions/upload-artifact@v3
        with:
          path: backendmarket-monolithic/target/backendmarket-monolithic-0.0.1-SNAPSHOT.jar

      # Step 2: Build Docker image
      - name: Build Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/backendmarket-monolithic
          GIT_SHA=$(git rev-parse --short HEAD)

          # Build the Docker image
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$GIT_SHA .

          # Push the Docker image
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$GIT_SHA

  docker-generation:
    name: Build Docker Image for Generation
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Copy JAR from Build
        uses: actions/upload-artifact@v3
        with:
          path: generation/target/generation-1.0-SNAPSHOT.jar

      - name: Build Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/generation-service
          GIT_SHA=$(git rev-parse --short HEAD)

          # Build the Docker image
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$GIT_SHA .

          # Push the Docker image
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$GIT_SHA

  docker-logger:
    name: Build Docker Image for Logger
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Copy JAR from Build
        uses: actions/upload-artifact@v3
        with:
          path: Logger/target/logger-1.0-SNAPSHOT.jar

      - name: Build Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/generation-service
          GIT_SHA=$(git rev-parse --short HEAD)

          # Build the Docker image
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$GIT_SHA .

          # Push the Docker image
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$GIT_SHA

  build-and-push-node-and-proxy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - front
          - proxy
          - backend/gameService

    steps:
      # checkout the code
      - name: checkout code
        uses: actions/checkout@v3

      # set up docker buildx for better performance
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      # build and push the docker image
      - name: build and push ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          image_name=ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}
          git_sha=$(git rev-parse --short head)

          # build the docker image
          docker build -t $image_name:latest -t $image_name:$git_sha .

          # push the docker image
          docker push $image_name:latest
          docker push $image_name:$git_sha